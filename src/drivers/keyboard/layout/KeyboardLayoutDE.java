package drivers.keyboard.layout;

import drivers.keyboard.KeyboardEvent;
import drivers.keyboard.KeyboardInterruptReceiver;

public class KeyboardLayoutDE extends KeyboardLayout{
    public static final int offset = 0;

    public void setCharOn(KeyboardEvent evt){
        //keyNo -= offset;

        if ((evt.modifiers & KeyboardInterruptReceiver.MODIFIER_CAPS) != 0){
            evt.setPrintChar(mappingCaps[evt.key]);
        }

        /*if ((evt.modifiers & KeyboardInterruptReceiver.MODIFIER_ALT) != 0){
            evt.setPrintChar(mappingNormal[evt.key]);
        }*/

        if (evt.modifiers == 0) {
            evt.setPrintChar(mappingNormal[evt.key]);
        }

    }

    public static final char[] mappingNormal = {
            '\0', '\0', '1', '2', '3', '4', '5', '6', '7', '8', // 0x00 - 0x09
            '9', '0', 's', '\0', '\0', '\0', 'q', 'w', 'e', 'r', // 0x0A (10)
            't', 'z', 'u', 'i', 'o', 'p', 'u', '+','\0', '\0', // 0x14 (20)
            'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'o', // 0x0A (30)
            'a', '^', '\0', '#', 'y', 'x', 'c', 'v', 'b', 'n', // 0x0A (40)
            'm', ',', '.', '-', '\0', '\0', '\0', ' ', '\0', '\0', // 0x0A (50)
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0' // 0x0A
    };

    public static final char[] mappingCaps = {
            '\0', '\0', '!', '"', '\0', '$', '%', '&', '/', '(', // 0x00 - 0x09
            ')', '=', '?', '\0', '\0', '\0', 'Q', 'W', 'E', 'R', // 0x0A (10)
            'T', 'Z', 'U', 'I', 'O', 'P', 'U', '*','\0', '\0', // 0x14 (20)
            'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'O', // 0x0A (30)
            'A', '\0', '\0', '\'', 'Y', 'X', 'C', 'V', 'B', 'N', // 0x0A (40)
            'M', ';', ':', '_', '\0', '\0', '\0', ' ', '\0', '\0', // 0x0A (50)
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', // 0x0A
            '\0', '\0', '\0', '\0', '\0' // 0x0A
    };


}
